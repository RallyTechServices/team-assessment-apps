<!DOCTYPE html>
<html>
<head>
    <title>Team Domain Health</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Jan 03 2018 15:26:24 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Jan 03 2018 15:26:24 GMT-0700 (MST)";
        var STORY    = "US1658";
        var BUILDER  = "corkr03";
        var CHECKSUM = 223508680161;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("CATS.teamassessmentapps.app.DomainApp",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},config:{defaultSettings:{projectDomainField:null,useDashboardTimeboxScope:!1}},launch:function(){this.logger.log("launch",this.getSettings()),this._initializeApp()},getShowTimebox:function(){return!0},getProjectDomainField:function(){return this.logger.log("getProjectDomainField",this.getSetting("projectDomainField")),this.getSetting("projectDomainField")||null},getUseDashboardTimeboxScope:function(){var a=this.getSetting("useDashboardTimeboxScope")||"false";return this.getContext().getTimeboxScope()?a===!0||"true"===a.toLowerCase():!1},getTimebox:function(){if(this.logger.log("getTimebox",this.getUseDashboardTimeboxScope(),this.getContext().getTimeboxScope()),this.getUseDashboardTimeboxScope()){var a="StartDate",b="EndDate";return"release"===this.getContext().getTimeboxScope().type.toLowerCase()&&(a="ReleaseStartDate",b="ReleaseDate"),{startDate:this.getContext().getTimeboxScope().getRecord().get(a),endDate:this.getContext().getTimeboxScope().getRecord().get(b)}}return{startDate:this.down("#startDate").getValue(),endDate:new Date}},onTimeboxScopeChange:function(a){this.getContext().setTimeboxScope(a),this.logger.log("onTimeboxScopeChange",a,this.getUseDashboardTimeboxScope(),a.getRecord()),this.getUseDashboardTimeboxScope()&&(a.getRecord()?this._updateView():Rally.ui.notify.Notifier.showWarning({message:"Please select a timebox."}))},addAppMessage:function(a){this.add({xtype:"container",itemId:"appMessage",html:'<div class="no-data-container"><div class="secondary-message">'+a+"</div></div>"})},clearAppMessage:function(){this.down("#appMessage")&&this.down("#appMessage").destroy()},_initializeApp:function(a){this.logger.log("_initializeApp",a),this.removeAll();var b=this.add({itemId:"selectorBox",xtype:"container",layout:"hbox"});if(this.getProjectDomainField()){var c=b.add({xtype:"rallyfieldvaluecombobox",fieldLabel:"Team Domain",labelAlign:"right",model:"Project",margin:10,multiSelect:!0,emptyText:"Project Scope",width:250,labelWidth:75,field:this.getProjectDomainField(),allowClear:!0});c.on("ready",function(a){var b=a.getStore().findBy(function(a){return""==a.get("value")});a.getStore().removeAt(b)},this),c.on("change",this._updateDomainProjects,this)}if(a&&Ext.Array.each(a,function(a){b.add(a)}),!this.getUseDashboardTimeboxScope()&&this.getShowTimebox()){var d=b.add({xtype:"rallydatefield",itemId:"startDate",fieldLabel:"Start Date",labelAlign:"right",margin:10,value:Rally.util.DateTime.add(new Date,"day",-14)});d.on("select",this._updateView,this)}b.add({xtype:"rallybutton",iconCls:"icon-export",margin:10,cls:"secondary rly-small",handler:this._export,scope:this}),this._updateDomainProjects()},_export:function(){this._showErrorNotification("Please implement the _export method.")},_updateDomainProjects:function(a,b,c){this.logger.log("_updateDomainProjects newValue",b,c);var d=b||[];if(this.domainProjects=null,!this.domainProjectsLoading)if(this.domainProjectsLoading=!0,d.length>0){this.logger.log("_updateDomainProjects",d.length);var e=this.getProjectDomainField(),f="contains",g=_.map(d,function(a){return{property:e,operator:f,value:a}});g=g.length>1?Rally.data.wsapi.Filter.or(g):Ext.create("Rally.data.wsapi.Filter",g[0]),g=g.and({property:"State",value:"Open"}),this.logger.log("Project Filters",g.toString()),this._fetchWsapiRecords({model:"Project",filters:g,fetch:["ObjectID","Name","Children:summary[State]"],limit:"Infinity"}).then({success:function(a){this.domainProjects=a,this._updateView()},failure:this._showErrorNotification,scope:this}).always(function(){this.domainProjectsLoading=!1},this)}else{this.domainProjects=null,this.logger.log("_updateDomainProjects no domain selected");for(var h=[],i=["Parent"],j=this.getContext().getProject()._ref,k=0;8>k;k++)h.push({property:i.join("."),value:j}),i.push("Parent");h.push({property:"ObjectID",value:this.getContext().getProject().ObjectID}),h=Rally.data.wsapi.Filter.or(h),h.and({property:"State",value:"Open"}),this.logger.log("Project Filters",h.toString()),this._fetchWsapiRecords({model:"Project",filters:h,fetch:["ObjectID","Name","Children:summary[State]"],limit:"Infinity"}).then({success:function(a){this.domainProjects=a,this._updateView()},failure:this._showErrorNotification,scope:this}).always(function(){this.domainProjectsLoading=!1},this)}},_updateView:function(){this._showErrorNotification("Please implement the _updateView method.")},_showErrorNotification:function(a){this.setLoading(!1),Rally.ui.notify.Notifier.showError({message:a})},_fetchWsapiRecords:function(a){var b=Ext.create("Deft.Deferred");return this.logger.log("_fetchWsapiRecords",a&&a.filters&&a.filters.toString()),a.limit||(a.limit="Infinity"),a.pageSize||(a.pageSize=2e3),a.enablePostGet=!0,a.context={project:null},Ext.create("Rally.data.wsapi.Store",a).load({callback:function(a,c,d){d?b.resolve(a):b.reject(c.error.errors.join(","))}}),b},getSettingsFields:function(){var a=[{xtype:"rallyfieldcombobox",fieldLabel:"Project Domain Field",model:"Project",labelWidth:150,labelAlign:"right",labelCls:"sliderlabel",name:"projectDomainField",allowBlank:!0,noEntryText:"-- Follow Project Scope --",emptyText:"-- Follow Project Scope --",_isNotHidden:function(a){return a&&!a.readOnly&&a.attributeDefinition&&a.attributeDefinition.Constrained&&a.attributeDefinition.Custom?!0:!1},listeners:{ready:function(a){a.getStore().add({name:"-- Follow Project Scope --",value:null})}}}];return this.getShowTimebox()&&a.push({xtype:"rallycheckboxfield",fieldLabel:"Follow Dashboard Timebox Scope",name:"useDashboardTimeboxScope"}),a},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{})},isExternal:function(){return"undefined"==typeof this.getAppId()},_fetchDoneStates:function(){var a=Ext.create("Deft.Deferred");return Rally.data.ModelFactory.getModel({type:"HierarchicalRequirement",success:function(b){var c=b.getField("ScheduleState");c.getAllowedValueStore().load({callback:function(b,c,d){if(d){for(var e=[],f=b.length-1;f>0;f--)e.push(b[f].get("StringValue")),"Accepted"==b[f].get("StringValue")&&(f=0);a.resolve(e)}else a.reject("Error loading ScheduleState values for User Story:  "+c.error.errors.join(","))},scope:this})},failure:function(){var b="Could not load schedule states";a.reject(b)}}),a.promise}}),Ext.define("CATS.teamassessmentapps.utils.Toolbox",{singleton:!0,saveCSVToFile:function(a,b,c){void 0===c&&(c={type:"text/csv;charset=utf-8"}),this.saveAs(a,b,c)},saveAs:function(a,b){if(Ext.isIE9m)return void Rally.ui.notify.Notifier.showWarning({message:"Export is not supported for IE9 and below."});var c=null;try{c=new Blob([a],{type:"text/plain"})}catch(d){window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,window.BlobBuilder&&"TypeError"==d.name&&(bb=new BlobBuilder,bb.append([a]),c=bb.getBlob("text/plain"))}if(!c)return void Rally.ui.notify.Notifier.showWarning({message:"Export is not supported for this browser."});var e=b;if(Ext.isIE10p)return void window.navigator.msSaveOrOpenBlob(c,e);var f=this.createObjectURL(c);if(f){var g=document.createElement("a");"download"in g?g.download=e:g.target="_blank",g.innerHTML="Download File",g.href=f,Ext.isChrome||(g.onclick=this.destroyClickedElement,g.style.display="none",document.body.appendChild(g)),g.click()}else Rally.ui.notify.Notifier.showError({message:"Export is not supported "})},createObjectURL:function(a){return window.webkitURL?window.webkitURL.createObjectURL(a):window.URL&&window.URL.createObjectURL?window.URL.createObjectURL(a):null},destroyClickedElement:function(a){document.body.removeChild(a.target)}}),Ext.define("CATS.teamassessmentapps.utils.WorkItemUtility",{singleton:!0,calculateWorkItemStats:function(a,b){for(var c={},d=Rally.util.DateTime.add(new Date,"day",-b),e=0;e<a.length;e++){var f=a[e].getData(),g=f.Project.Name;c[g]||(c[g]={totalSnaps:0,activeSnaps:0,activeUsers:[],snaps:[],workItemCreation:[],latestUpdate:new Date(1900,1,1)});var h=Rally.util.DateTime.format(Rally.util.DateTime.fromIsoString(f.CreationDate),"Y-m-d");c[g].workItemCreation.push(h),c[g].totalSnaps++;var i=Rally.util.DateTime.fromIsoString(f._ValidFrom);i>c[g].latestUpdate&&(c[g].latestUpdate=i),i>=d&&(c[g].snaps.push(f),c[g].activeSnaps++,c[g].activeUsers.push(f._User))}return Ext.Object.each(c,function(a,b){b.activeUsers=_.uniq(b.activeUsers).length,b.workItemCreation=this._arrayToHashCount(b.workItemCreation)},this),c},_arrayToHashCount:function(a){var b={};a=Ext.Array.sort(a);for(var c=0;c<a.length;c++)b[a[c]]||(b[a[c]]=0),b[a[c]]++;return b},fetchWorkItemInfo:function(a){var b=Ext.create("Deft.Deferred"),c=Ext.Array.map(a,function(a){return a.get("ObjectID")});return Ext.create("Rally.data.lookback.SnapshotStore",{find:{_TypeHierarchy:{$in:["Artifact"]},Project:{$in:c},__At:"current"},fetch:["ObjectID","Project","_TypeHierarchy","_ValidFrom","_User","CreationDate","Iteration"],hydrate:["_TypeHierarchy","Project"],removeUnauthorizedSnapshots:!0,limit:"Infinity",useHttpPost:!0,sorters:{_ValidFrom:-1}}).load({callback:function(a,c,d){if(c.wasSuccessful())b.resolve(a);else{var e=c&&c.error&&c.error.errors&&c.error.errors.join(",")||"Unknown error fetching work item data.";e+="<br/>There could be an issue with the Lookback API.  Please turn off Show Work Item Data in the App Settings and try again.",b.reject(e)}}}),b.promise}}),Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",{extend:"Rally.ui.grid.Grid",alias:"widget.basegrid",config:{showPagingToolbar:!1,showRowActionsColumn:!1,enableBulkEdit:!1,itemId:"teamGrid"},constructor:function(a){this.config.columnCfgs=this._getColumnCfgs(a.usePoints),this.callParent(arguments)},_initTooltip:function(a){var b=Rally.technicalservices.util.HealthRenderers.getTooltip(a.dataIndex);Ext.create("Rally.ui.tooltip.ToolTip",{target:a.getEl(),html:b})},_plannedVelocityRenderer:function(a,b,c){var d=a>0?Rally.technicalservices.util.HealthRenderers.green:Rally.technicalservices.util.HealthRenderers.red;return b.tdAttr='data-qtip="The planned velocity set on the Iteration"',b.style="padding-right:7px;text-align:center;background-color:"+d,a},_percentRenderer:function(a,b,c,d,e){var f=this.columns[e].dataIndex,g=Rally.technicalservices.util.HealthRenderers.getCellColor(a,f,c.getData());return b.style="padding-right:7px;text-align:center;background-color:"+g,a>=0&&2>a?Math.round(100*a)+" %":"--"},_metricRenderer:function(a,b,c,d,e){var f=this.columns[e].dataIndex,g=Rally.technicalservices.util.HealthRenderers.getCellColor(a,f,c.getData());return b.style="padding-right:7px;text-align:center;background-color:"+g,a>=0?a:"--"},_decimalRenderer:function(a,b,c,d,e){var f=this.columns[e].dataIndex,g=Rally.technicalservices.util.HealthRenderers.getCellColor(a,f,c.getData());return b.style="padding-right:7px;text-align:center;background-color:"+g,a>=0?a.toFixed(1):"--"}}),Ext.define("CArABU.technicalservices.HealthIndexTemplate",{extend:"Ext.XTemplate",width:"90%",height:"20px",config:{calculateColorFn:function(a){return colors[a]},getContainerClass:function(a){return""},getClickableClass:function(){return""},getDimensionStyle:function(){return"width: "+this.width+"; height: "+this.height+"; line-height: "+this.height+";display: inline-block"},calculateWidth:function(a,b){var c=Ext.Array.sum(Ext.Object.getValues(a));if(c>0){var d=(a[b]||0)/c*100;return d+"%"}return 0}},constructor:function(a){var b=["<tpl>",'<div class="progress-bar-container {[this.getClickableClass()]} {[this.getContainerClass(values)]}" style="{[this.getDimensionStyle()]}">','<tpl foreach=".">','<div class="rly-progress-bar" style="text-align:center;background-color: {$}; width: {[this.calculateWidth(parent,xkey)]}; "></div>',"</tpl>","</div>","</tpl>"];return this.callParent(b)}}),Ext.define("Rally.technicalservices.util.Health",{singleton:!0,getScopeAdditions:function(a){var b=[],c=_.keys(a);_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});for(var d=0,e=0;e<b.length-1;e++)b[e+1]>b[e]&&(d+=b[e+1]-b[e]);return d},getScopeRemovals:function(a){var b=[],c=_.keys(a);_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});for(var d=0,e=0;e<b.length-1;e++)b[e]>b[e+1]&&(d+=b[e]-b[e+1]);return isNaN(d)?-1:d},getStandardDeviation:function(a){var b=Ext.Array.mean(a),c=0;Ext.Array.each(a,function(a){c+=(b-a)*(b-a)});var d=Math.sqrt(c/a.length);return d},getChurnDirection:function(a){var b=0,c=0;return Ext.Array.each(a,function(a,d){d>0&&(b+=a-c),c=a}),b&&0!==b?b/Math.abs(b):1},getChurn:function(a){var b=[],c=_.keys(a),d=0;_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});var e=Rally.technicalservices.util.Health.getStandardDeviation(b);e>=0&&0!=Ext.Array.mean(b)&&(d=Ext.util.Format.number(e/Ext.Array.mean(b),"0.00"));var f=Rally.technicalservices.util.Health.getChurnDirection(b),g=d*f;return isNaN(g)?null:d*f},getDayTotal:function(a,b){return a[b]?Ext.Array.sum(_.values(a[b])):0},getTaskChurn:function(a){var b=null,c=null,d=_.keys(a);return _.each(d,function(d){null!=c&&(b=c),c=Rally.technicalservices.util.Health.getDayTotal(a,d)}),null==c||null==b||0==c&&0==b?null:Ext.util.Format.number((c-b)/b,"0.00")},getAverageInState:function(a,b){var c=[],d=_.keys(a);return _.each(d,function(d){var e=Ext.Array.sum(_.values(a[d])),f=a[d][b]||0;e>0?c.push(f/e):c.push(0)}),Ext.util.Format.number(Ext.Array.mean(c),"0.00")},getDayTotalsArray:function(a){var b=[];return _.each(a,function(c,d){b.push(Rally.technicalservices.util.Health.getDayTotal(a,d))}),b},getDoneStatesHash:function(a,b){var c={};return _.each(a,function(a,d){c[d]=0,_.each(b,function(b){c[d]+=a[b]||0})}),c},getAllHash:function(a){var b={};return _.each(a,function(c,d){b[d]=Rally.technicalservices.util.Health.getDayTotal(a,d)}),b},getVelocity:function(a,b){var c=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),d=_.sortBy(_.keys(c),function(a){return Date.parse(a)});return c[d[d.length-1]]||0},getPlanned:function(a){var b=_.sortBy(_.keys(a),function(a){return Date.parse(a)}),c=_.values(a[b[0]]);return Ext.Array.sum(c)||0},getHalfAcceptanceRatio:function(a,b,c){var d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=Rally.technicalservices.util.Health.getAllHash(a),f=-1,g=0,h=null,i=_.sortBy(_.keys(e),function(a){return Date.parse(a)});_.each(i,function(a){g++;var b=e[a]||0,c=d[a]||0;c/b>=.5&&-1===f?(f=g,h=a):.5>c/b&&f>-1&&(f=-1,h=null)});var j=2;return f>-1&&(c>-1&&(g=c),j=Ext.util.Format.number(f/g,"0.00")),{Ratio:j,ratioDate:h}},getIncompletionRatio:function(a,b,c){var d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=_.keys(a),f=e.pop(),g=Rally.technicalservices.util.Health.getDayTotal(a,f),h=d[f],i=a[f]&&a[f][c]||0,j=2;g>0&&(j=1-(i+h)/g),j=Ext.util.Format.number(j,"0.00");var k=2;return g>0&&(k=Ext.util.Format.number(1-j,"0.00")),{CompletionRatio:k,IncompletionRatio:j}},getVelocityVariance:function(a,b,c){if(b&&b.length>=c){var d=Ext.Array.mean(b),e=0;if(d>0)return e=Number(a/d-1)}return null},getAcceptanceRatio:function(a,b){var c=2,d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=_.keys(a),f=e.pop(),g=Rally.technicalservices.util.Health.getDayTotal(a,f),h=d[f]||0;return g>0&&(c=h/g),c=Ext.util.Format.number(c,"0.00")},daysBetween:function(a,b,c){var d=Ext.clone(a),e=Ext.clone(b);if(d==e)return 0;if("number"==typeof d&&(d=new Date(d)),"number"==typeof e&&(e=new Date(e)),c){if(d>e){var f=e;e=d,d=f}for(var g=0,h=d;e>h;){var i=h.getDay();0!=i&&6!=i&&g++;var j=Rally.util.DateTime.add(h,"day",1);h=j}return g}return Math.abs(Rally.util.DateTime.getDifference(d,e,"day"))},getDailyWIP:function(a,b,c){var d={},e=new Date;e.setHours(23,59,59,999),startDay=Rally.util.DateTime.add(e,"day",-b);for(var f=0;f<a.length;f++){var g=a[f],h=Rally.util.DateTime.fromIsoString(g._ValidTo),i=Rally.util.DateTime.fromIsoString(g._ValidFrom);if("In-Progress"===g.ScheduleState)for(i<startDay&&(i=startDay),h>e&&(h=e);h>i;){var j=c?g.PlanEstimate||0:1,k=Rally.util.DateTime.format(i,"Y-m-d");d[k]=(d[k]||0)+j,i=Rally.util.DateTime.add(i,"day",1)}}return Ext.Object.getValues(d)}}),Ext.define("Rally.technicalservices.utils.DomainProjectHealthModel",{extend:"Ext.data.Model",fields:[{name:"project",type:"object"},{name:"classification"},{name:"team"},{name:"__iteration",type:"object"},{name:"__cfdRecords",type:"object"},{name:"__artifacts",type:"object"},{name:"__plannedLoad",defaultValue:-1},{name:"__ratioEstimated",defaultValue:-1},{name:"__planned",defaultValue:-1},{name:"__currentPlanned",defaultValue:-1},{name:"__velocity",defaultValue:-1},{name:"__acceptedAtSprintEnd",defaultValue:-1},{name:"__acceptedAfterSprintEnd",defaultValue:-1},{name:"__addedScope",defaultValue:0},{name:"__removedScope",defaultValue:0},{name:"__ratioInProgress",defaultValue:-1},{name:"__currentVelocity",defaultValue:-2},{name:"__workItemData",type:"object"},{name:"__plannedLoad",defaultValue:-1},{name:"__netChurn",defaultValue:-1},{name:"__avgCycleTime",defaultValue:-1},{name:"__sdCycleTime",defaultValue:-1},{name:"__avgThroughput",defaultValue:-1},{name:"__throughput",defaultValue:-1},{name:"__avgWIP",defaultValue:-1},{name:"__sdWIP",defaultValue:-1},{name:"__healthIndex",type:"auto"},{name:"__activeWorkItems",convert:function(a,b){return b.get("__workItemData")&&b.get("__workItemData").activeSnaps?b.get("__workItemData").activeSnaps:"--"}},{name:"__totalWorkItems",convert:function(a,b){return b.get("__workItemData")&&b.get("__workItemData").totalSnaps?b.get("__workItemData").totalSnaps:"--"}},{name:"__activeUsers",convert:function(a,b){return b.get("__workItemData")&&b.get("__workItemData").activeUsers?b.get("__workItemData").activeUsers:"--"}},{name:"__lastUpdatedWorkItem",convert:function(a,b){return b.get("__workItemData")&&b.get("__workItemData").latestUpdate?b.get("__workItemData").latestUpdate:"--"}},{name:"__plannedVelocity",convert:function(a,b){return b.get("__iteration")&&b.get("__iteration").PlannedVelocity?b.get("__iteration").PlannedVelocity:"--"}},{name:"__days",convert:function(a,b){return b.get("__iteration")&&b.get("__iteration").EndDate&&b.get("__iteration").EndDate?Rally.technicalservices.util.Health.daysBetween(b.get("__iteration").EndDate,b.get("__iteration").StartDate,!0):"--"}},{name:"__activeScheduledIntoIteration",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return a.Iteration>0});return c.length}return"--"}},{name:"__activePortfolioItemCount",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return/PortfolioItem/.test(a._TypeHierarchy.slice(-1)[0])});return c.length}return"--"}},{name:"__activeStoryCount",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return"HierarchicalRequirement"===a._TypeHierarchy.slice(-1)[0]});return c.length}return"--"}},{name:"__activeDefectCount",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return"Defect"===a._TypeHierarchy.slice(-1)[0]});return c.length}return"--"}},{name:"__activeTestCaseCount",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return"TestCase"===a._TypeHierarchy.slice(-1)[0]});return c.length}return"--"}},{name:"__activeTaskCount",convert:function(a,b){if(b.get("__workItemData")&&b.get("__workItemData").snaps&&b.get("__workItemData").snaps.length>0){var c=_.filter(b.get("__workItemData").snaps,function(a){return"Task"===a._TypeHierarchy.slice(-1)[0]});return c.length}return"--"}},{name:"__defined",defaultValue:-1},{name:"projectName",convert:function(a,b){return b.get("project")&&b.get("project").Name?b.get("project").Name:void 0}}],initialize:function(){this.resetDefaults();var a="inactive";this.get("project")&&this.get("project").Summary&&this.get("project").Summary.Children&&this.get("project").Summary.Children.State&&this.get("project").Summary.Children.State.Open>0?a="program":this.get("__workItemData")&&this.get("__workItemData").activeSnaps>0&&(a="other",this.get("__iteration")&&this.get("__plannedVelocity")>0&&this.get("__iteration").PlanEstimate>0&&(a="scrum")),this.set("classification",a)},updateScrumData:function(a,b,c,d,e,f,g){this.set("__cfdRecords",b),this.set("__artifacts",c),this.set("__iteration",a),this.recalculate(d,e,f,g)},updateOtherData:function(a,b,c,d,e,f,g,h){this.set("__history",a),this.set("__definedArtifacts",b),this.set("__acceptedArtifacts",c),this.set("__activeDays",d),this.recalculate(e,f,g,h)},recalculate:function(a,b,c,d){this.resetDefaults(),"scrum"===this.get("classification")&&this.recalculateScrumData(a,b,c,d),"other"===this.get("classification")&&this._calculateKanbanMetrics(a,b,c,d),this.set("__healthIndex",Rally.technicalservices.util.HealthRenderers.getVisualHealthIndex(this.getData(),a))},_calculateKanbanMetrics:function(a,b,c,d){var e=this.get("__acceptedArtifacts")||[],f=this.get("__definedArtifacts")||[],g=this.get("__history")||[];this.set("__defined",f.length);for(var h=0,i=0,j=0;j<f.length;j++)f[j].PlanEstimate&&h++,i++;var k=i>0?h/i:-1;this.set("__ratioEstimated",k);var l=this.get("__activeDays"),m=this._calculateDailyCycleTime(e,l),n=-1,o=-1;m.length>0&&(n=Ext.Array.mean(m),o=n>0?Rally.technicalservices.util.Health.getStandardDeviation(m)/n:-1);var p=this._calculateDailyThroughput(e,l,a),q=Rally.technicalservices.util.Health.getDailyWIP(g,l,a),r=Ext.Array.mean(q),s=r>0?Rally.technicalservices.util.Health.getStandardDeviation(q)/r:-1;this.set("__avgCycleTime",n),this.set("__sdCycleTime",o),this.set("__avgThroughput",Ext.Array.mean(p)),this.set("__throughput",Ext.Array.sum(p)),this.set("__avgWIP",r),this.set("__sdWIP",s)},_calculateDailyCycleTime:function(a,b){var c=[];return Ext.Array.each(a,function(a){var b=(Rally.util.DateTime.format(a.AcceptedDate,"Y-m-d"),Rally.util.DateTime.getDifference(a.AcceptedDate,a.InProgressDate,"second"));b/=86400,c.push(b)}),c},_calculateDailyThroughput:function(a,b,c){for(var d={},e=new Date,f=0;b>f;f++){var g=Rally.util.DateTime.format(Rally.util.DateTime.add(e,"day",-f),"Y-m-d");d[g]=0}return Ext.Array.each(a,function(a){var b=Rally.util.DateTime.format(a.AcceptedDate,"Y-m-d"),e=c?a.PlanEstimate||0:1;d[b]>=0&&(d[b]+=e)}),Ext.Object.getValues(d)},recalculateScrumData:function(a,b,c,d){this.get("__cfdRecords")&&this._processCFD(this.get("__cfdRecords"),this.get("__iteration"),a,c),this.get("__artifacts")&&this._mungeArtifacts(this.get("__artifacts"),a);var e=0;if(this.get("__planned")>0){var f=this.get("__addedScope")||0,g=this.get("__removedScope")||0;e=Math.abs(f-g)/this.get("__planned")}if(this.set("__netChurn",e),this.get("__plannedVelocity")>0){var h=this.get("__planned")/this.get("__plannedVelocity");this.set("__plannedLoad",h)}},resetDefaults:function(){this.set("__ratioEstimated",-1),this.set("__planned",-1),this.set(NaN),this.set("__acceptedAfterSprintEnd",-1),this.set("__acceptedAtSprintEnd",-1),this.set("__addedScope",-1),this.set("__removedScope",-1)},_setError:function(){var a="Error";this.set("__ratioEstimated",a),this.set("__planned",a),this.set("__velocity",a),this.set("__acceptedAfterSprintEnd",a),this.set("__acceptedAtSprintEnd",a),this.set("__addedScope",a),this.set("__removedScope",a)},_processCFD:function(a,b,c,d){var e={},f={};Ext.Array.each(a,function(a){var b=a.CreationDate;if(this._isValidDate(b)){var d=a.CardEstimateTotal||0,g=a.CardState,h=a.TaskEstimateTotal||0;c===!1&&(d=a.CardCount||0),e[b]||(e[b]={}),f[b]||(f[b]={}),e[b][g]||(e[b][g]=0),f[b][g]||(f[b][g]=0),e[b][g]+=d,f[b][g]+=h}},this);var g="In-Progress",h=(this.get("__days"),Rally.technicalservices.util.Health.getAverageInState(e,g));h>0&&this.set("__ratioInProgress",h);var i=Rally.technicalservices.util.Health.getScopeAdditions(e,c);this.set("__addedScope",i);var j=Rally.technicalservices.util.Health.getScopeRemovals(e,c);this.set("__removedScope",j);var k=Rally.technicalservices.util.Health.getVelocity(e,d);this.set("__velocity",k);var l=Rally.technicalservices.util.Health.getPlanned(e);this.set("__planned",l)},_isValidDate:function(a){var b=this.get("__iteration").StartDate,c=this.get("__iteration").EndDate;return!a||a.getDay()>0&&a.getDay()<6?c&&b?c>=a&&a>=b:!0:!1},_mungeArtifacts:function(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;this.get("__iteration")&&(Ext.Array.each(a,function(a){var j=a.PlanEstimate;g+=j||0,f++,(!Ext.isEmpty(j)&&j>=0||!b)&&(c++,a.AcceptedDate&&(d+=j,i++,a.AcceptedDate<=this.get("__iteration").EndDate&&(e+=j,h++)))},this),b?(this.set("__currentPlanned",g),g&&(this.set("__acceptedAfterSprintEnd",(d-e)/g),this.set("__acceptedAtSprintEnd",e/g))):(this.set("__currentPlanned",f),f&&(this.set("__acceptedAfterSprintEnd",(i-h)/f),this.set("__acceptedAtSprintEnd",h/f))),f>0&&this.set("__ratioEstimated",c/f))}}),Ext.define("CArABU.teamassessmentapps.teamhealth.TeamHealthExporter",{singleton:!0,exportAllData:function(a,b){if(a){var c=CArABU.teamassessmentapps.teamhealth.TeamHealthExporter.getExportColumnCfgs(b),d=[_.pluck(c,"text").join(",")],e=_.sortBy(a,function(a){return a.get("classification")});Ext.Array.each(e,function(a){var b=[];Ext.Array.each(c,function(c){var d=a.get(c.dataIndex);Ext.isObject(d)&&(d=d._refObjectName||d.Name),(!d||0>d)&&(d=""),b.push(d)}),d.push(b.join(","))});var f=d.join("\r\n"),g=Ext.String.format("health-{0}.csv",Rally.util.DateTime.format(new Date,"Y-m-d-h-i-s"));CATS.teamassessmentapps.utils.Toolbox.saveAs(f,g)}},getExportColumnCfgs:function(a){var b=a?"Points":"Count",c=[{dataIndex:"classification",text:"Classification"},{dataIndex:"team",text:"Team"},{dataIndex:"__totalWorkItems",text:"Total Work Items"},{dataIndex:"__activeWorkItems",text:"Active Work Items"},{dataIndex:"__lastUpdatedWorkItem",text:"Last Updated Work Item"},{dataIndex:"__activeWorkItems",text:"Active Work Items"},{dataIndex:"__activePortfolioItemCount",text:"Active Portfolio Items"},{dataIndex:"__activeStoryCount",text:"Active User Stories"},{dataIndex:"__activeDefectCount",text:"Active Defects"},{dataIndex:"__activeTestCaseCount",text:"Active Test Cases"},{dataIndex:"__activeTaskCount",text:"Active Tasks"},{dataIndex:"__iteration",text:"Iteration"}];return c=this.usePoints?c.concat([{dataIndex:"__plannedVelocity",text:"Iteration Planned Velocity"},{dataIndex:"__ratioEstimated",text:"% Items Estimated"},{dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b)},{dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b)},{dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b)
}]):c.concat([{dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b)},{dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b)},{dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b)}]),c=c.concat([{dataIndex:"__ratioInProgress",text:Ext.String.format("% Average Daily in Progress ({0})",b)},{dataIndex:"__acceptedAtSprintEnd",text:Ext.String.format("% Accepted by Sprint End ({0})",b)},{dataIndex:"__acceptedAfterSprintEnd",text:Ext.String.format("% Accepted after Sprint End ({0})",b)},{dataIndex:"__addedScope",text:Ext.String.format("Added Scope ({0})",b)},{dataIndex:"__removedScope",text:Ext.String.format("Removed Scope ({0})",b)},{dataIndex:"__netChurn",text:Ext.String.format("Net Churn ({0})",b)},{dataIndex:"__plannedLoad",text:"Planning Load"}])}}),Ext.define("CArABU.teamassessmentapps.teamhealth.InactiveGrid",{extend:"CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",alias:"widget.inactivegrid",_getColumnCfgs:function(a){return[{dataIndex:"team",text:"Team",flex:3},{dataIndex:"__totalWorkItems",text:"Total Work Items",align:"center",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__lastUpdatedWorkItem",text:"Last Updated Work Item",align:"center",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}}]}}),Ext.define("CArABU.teamassessmentapps.teamhealth.OtherGrid",{extend:"CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",alias:"widget.othergrid",_getColumnCfgs:function(a){var b=a?"(Points)":"(Count)";return[{dataIndex:"team",text:"Team",flex:3},{dataIndex:"__totalWorkItems",text:"Total Work Items",align:"center",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeWorkItems",text:"Active Work Items",align:"center",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__ratioEstimated",text:"% Items Estimated",renderer:this._percentRenderer,flex:1,sortable:!1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__defined",text:"# Defined Stories",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__throughput",text:"Accepted Stories "+b,sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__avgThroughput",text:"Average Accepted Stories per Day "+b,sortable:!1,flex:1,renderer:this._decimalRenderer,listeners:{afterrender:this._initTooltip}},{dataIndex:"__avgCycleTime",text:"Average Cycle Time (Days)",sortable:!1,flex:1,renderer:this._decimalRenderer,listeners:{afterrender:this._initTooltip}},{dataIndex:"__sdCycleTime",text:"Cycle Time CoV",sortable:!1,flex:1,renderer:this._percentRenderer,listeners:{afterrender:this._initTooltip}},{dataIndex:"__avgWIP",text:"Average Work In-Progress per Day "+b,sortable:!1,flex:1,renderer:this._decimalRenderer,listeners:{afterrender:this._initTooltip}},{dataIndex:"__sdWIP",text:"Work In-Progress CoV",sortable:!1,flex:1,renderer:this._percentRenderer,listeners:{afterrender:this._initTooltip}}]}}),Ext.define("CArABU.teamassessmentapps.teamhealth.ProgramGrid",{extend:"CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",alias:"widget.programgrid",_getColumnCfgs:function(a){return[{dataIndex:"team",text:"Team",flex:3},{dataIndex:"__totalWorkItems",text:"Total Work Items",align:"center",sortable:!1,flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeWorkItems",text:"Active Work Items",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activePortfolioItemCount",text:"Active Portfolio Items",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeStoryCount",text:"Active User Stories",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeDefectCount",text:"Active Defects",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeTestCaseCount",text:"Active Test Cases",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__activeTaskCount",text:"Active Tasks",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}}]}}),Ext.define("CArABU.teamassessmentapps.teamhealth.ScrumGrid",{extend:"CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",alias:"widget.scrumgrid",config:{columnCfgs:null},_getColumnCfgs:function(a){var b=a?"Points":"Count",c={flex:1,listeners:{afterrender:this._initTooltip},align:"center",sortable:!1},d=[{dataIndex:"team",text:"Team",flex:3},Ext.apply({},{dataIndex:"__totalWorkItems",text:"Total Work Items"},c),Ext.apply({},{dataIndex:"__activeWorkItems",text:"Active Work Items"},c),Ext.apply({},{dataIndex:"__iteration",text:"Iteration",flex:3,renderer:function(a,b,c){return a&&a.Name?a.Name:"--"}},c)];return d=a?d.concat([Ext.apply({},{dataIndex:"__plannedVelocity",text:"Iteration Planned Velocity",renderer:this._plannedVelocityRenderer,toolTip:"The planned velocity set on the Iteration"},c),Ext.apply({},{dataIndex:"__ratioEstimated",text:"% Items Estimated",renderer:this._percentRenderer},c),Ext.apply({},{dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b),renderer:this._metricRenderer},c),Ext.apply({},{dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b),renderer:this._metricRenderer},c),Ext.apply({},{dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b),renderer:this._metricRenderer},c)]):d.concat([Ext.apply({},{dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b)},c),Ext.apply({},{dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b)},c),Ext.apply({},{dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b)},c)]),d=d.concat([Ext.apply({},{dataIndex:"__ratioInProgress",text:Ext.String.format("% Average Daily in Progress ({0})",b),renderer:this._percentRenderer},c),Ext.apply({},{dataIndex:"__acceptedAtSprintEnd",text:Ext.String.format("% Accepted by Sprint End ({0})",b),renderer:this._percentRenderer},c),Ext.apply({},{dataIndex:"__acceptedAfterSprintEnd",text:Ext.String.format("% Accepted after Sprint End ({0})",b),renderer:this._percentRenderer},c),Ext.apply({},{dataIndex:"__addedScope",text:Ext.String.format("Added Scope ({0})",b),renderer:this._metricRenderer},c),Ext.apply({},{dataIndex:"__removedScope",text:Ext.String.format("Removed Scope ({0})",b),renderer:this._metricRenderer},c),Ext.apply({},{dataIndex:"__netChurn",text:Ext.String.format("Net Churn ({0})",b),renderer:this._percentRenderer},c),Ext.apply({},{dataIndex:"__plannedLoad",text:"Planning Load",renderer:this._percentRenderer},c)])}}),Ext.define("CArABU.teamassessmentapps.teamhealth.SummaryGrid",{extend:"CArABU.teamassessmentapps.utils.TeamHealthBaseGrid",alias:"widget.summarygrid",_getColumnCfgs:function(a){var b={scrum:"icon-graph",other:"icon-board",program:"icon-portfolio",inactive:"icon-box"};return[{dataIndex:"team",text:"Team",flex:3,renderer:function(a,c,d){return c.tdCls="team-label "+d.get("classification"),Ext.String.format('<div class="team-label {0} {1}"></div>{2}',b[d.get("classification")],d.get("classification"),a)}},{dataIndex:"__activeWorkItems",text:"Active Work Items",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip}},{dataIndex:"__healthIndex",text:"Health",sortable:!1,align:"center",flex:1,listeners:{afterrender:this._initTooltip},renderer:this._renderHealthIndex}]},_renderHealthIndex:function(a,b,c){if(a&&Ext.isObject(a)){var d=Ext.create("CArABU.technicalservices.HealthIndexTemplate");return d.apply(a)}return""}}),Ext.define("Rally.technicalservices.util.HealthRenderers",{singleton:!0,red:"#ff0000",yellow:"#ffff00",green:"#00ff00",grey:"#e6e6e6",tooltips:{__totalWorkItems:"Total number of artifacts (Portfolio Items, User Stories, Defects, Tasks, Test Cases, Test Sets, Defect Suites) in the project.",__activeWorkItems:"Number of work items created or updated within the active window specified in app settings.",__ratioInProgress:"% Average Daily In Progress: This is the average of the ratio of points (or count) in an In Progress state versus the total points for each day during the course of the iteration. This is calculated using Iteration Cumulative Flow Data.",__acceptedAfterSprintEnd:"Actual Accepted After Sprint End: The sum of Points or Count accepted after the sprint ended.",__acceptedAtSprintEnd:"Actual Accepted: The actual sum of Points (or Count) accepted as of the last day of the iteration. This number comes from the cumulative flow data from the last day of the iteration.",__ratioEstimated:"Ratio of Work Items estimated for the Iteration.",__plannedVelocity:"Iteration Planned Velocity: The planned velocity set on the Iteration",__planned:"Actual Planned at Sprint Start: The actual sum of Points (or Count) planned into the iteration. This number comes from the cumulative flow data from the first day of the iteration.",__currentPlanned:"Current Planned: The sum of Points (or Count) associated with the iteration currently. This number will be different from the Actual Planned becuase it represents the current number of points associated with the iteration. If stories were added or removed from the iteration after the first day, this will include those.",__velocity:"Iteration Planned Velocity: The planned velocity set on the Iteration",__addedScope:"Added Scope: This is the sum of points (or count) added each day over the course of the iteration. Note that the net scope change for the iteration should be represented by subtracting Removed Scope from Added Scope. This is calculated using Iteration Cumulative Flow Data.",__removedScope:"Removed Scope: This is the sum of points (or count) removed each day over the course of the iteration. Note that the net scope change for the iteration should be represented by subtracting Removed Scope from Added Scope. This is calculated using Iteration Cumulative Flow Data.",__netChurn:"Net Churn is the absolute value of the Added Scope - Removed Scope / Actual Planned at Iteration Start.",__plannedLoad:"Planned Load is the Actual Planned at Sprint Start / Iteration Planned Velocity",__throughput:"Throughput: Stories accepted within the active window specified in app settings.",__avgThroughput:"Average number of stories accepted per day within the active window specified in app settings.",__avgCycleTime:"Cycle Time: Average time (in days) from In-Progress to Accepted for any stories accepted within the active window specified in App settings.",__sdCycleTime:"Coefficient of Variation for the CycleTime (In-Progress to Accepted) for any stories accepted within the active window specified in App Settings.",__avgWIP:"Average of the daily Work In Progress for the active windows specified in app settings.",__sdWIP:"Coefficient of Variation for the daily work in progress for the active window specified in the app settings."},metrics:{__plannedVelocity:{green:0,yellow:0,classifications:["scrum"]},__ratioInProgress:{green:0,yellow:0,reversed:!0,classifications:["scrum"],colorFn:"percent"},__acceptedAfterSprintEnd:{green:0,yellow:0,reversed:!0,classifications:["scrum"],colorFn:"percent"},__acceptedAtSprintEnd:{green:0,yellow:0,classifications:["scrum"],colorFn:"percent"},__ratioEstimated:{green:0,yellow:0,classifications:["scrum","other"],colorFn:"percent"},__planned:{green:0,yellow:0,classifications:["scrum"],colorFn:"pointsPercent"},__currentPlanned:{green:0,yellow:0,classifications:["scrum"],colorFn:"pointsPercent"},__velocity:{green:0,yellow:0,classifications:["scrum"],colorFn:"pointsPercent"},__addedScope:{green:0,yellow:0,reversed:!0,classifications:["scrum"],colorFn:"scope"},__removedScope:{green:0,yellow:0,reversed:!0,classifications:["scrum"],colorFn:"scope"},__netChurn:{green:0,yellow:0,reversed:!0,classifications:["scrum"],colorFn:"percent"},__plannedLoad:{green:0,yellow:0,x2:!0,classifications:["scrum"],colorFn:"percent"},__sdCycleTime:{green:0,yellow:0,reversed:!0,classifications:["other"],colorFn:"percent"},__sdWIP:{green:0,yellow:0,reversed:!0,classifications:["other"],colorFn:"percent"}},getTooltip:function(a){return Rally.technicalservices.util.HealthRenderers.tooltips[a]||"No tooltip"},getCellColor:function(a,b,c){var d=Rally.technicalservices.util.HealthRenderers.metrics[b];if(!d)return"#ffffff";if(0>a)return Rally.technicalservices.util.HealthRenderers.grey;if(a=Rally.technicalservices.util.HealthRenderers.getColorValue(a,b,c,d),d.reversed)return a<=d.green?Rally.technicalservices.util.HealthRenderers.green:a<=d.yellow?Rally.technicalservices.util.HealthRenderers.yellow:Rally.technicalservices.util.HealthRenderers.red;var e=Rally.technicalservices.util.HealthRenderers.red,f=100+(100-d.green),g=100+(100-d.yellow);return a>d.green&&f>a?e=Rally.technicalservices.util.HealthRenderers.green:a>d.yellow&&g>a&&(e=Rally.technicalservices.util.HealthRenderers.yellow),e},getColorValue:function(a,b,c,d){switch(d.colorFn){case"percent":return 100*a;case"pointsPercent":var e=c.__iteration&&c.__iteration.PlannedVelocity;return e?a/e*100:-1;case"scope":var f=c.__planned;return f?a/f*100:-1}return a},getVisualHealthIndex:function(a,b){var c=[];return _.each(Rally.technicalservices.util.HealthRenderers.metrics,function(b,d){if(_.contains(b.classifications,a.classification)){var e=Rally.technicalservices.util.HealthRenderers.getCellColor(a[d],d,a);c.push(e)}}),c.length>0?c=_.countBy(c,function(a){return a}):null}}),Ext.define("team-health",{extend:"CATS.teamassessmentapps.app.DomainApp",maxIterationsAgo:9,doneStates:["Accepted"],config:{defaultSettings:{ratioInProgress:"30,60",ratioEstimated:"75,90",acceptedAfterSprintEnd:"10,25",acceptedAtSprintEnd:"75,90",planned:"75,90",velocity:"75,90",addedScope:"10,25",removedScope:"10,25",activeDays:20,netChurn:"15,20",plannedLoad:"50,75",sdCycleTime:"10,25",sdWIP:"10,25"}},launch:function(){this.logger.log("launch",this.getSettings()),this._setThreshholds(this.getSettings()),this._fetchDoneStates().then({success:function(a){this.doneStates=a,this.logger.log("doneState",this.doneStates),this._initializeApp()},failure:this._showErrorNotification,scope:this})},_initializeApp:function(){var a=[{xtype:"rallybutton",text:"Summary",itemId:"classicficationBtn-summary",margin:"10 -1 10 25",pressed:!0,cls:"primary rly-small",toggleGroup:"classificationView",toggleHandler:this._tabChange,style:{borderBottomRightRadius:0,borderTopRightRadius:0},scope:this},{xtype:"rallybutton",text:"Scrum",itemId:"classicficationBtn-scrum",margin:"10 -1 10 -1",pressed:!1,cls:"secondary rly-small",iconCls:"icon-graph",toggleGroup:"classificationView",toggleHandler:this._tabChange,style:{borderBottomRightRadius:0,borderTopRightRadius:0},scope:this},{xtype:"rallybutton",text:"Other",iconCls:"icon-board",itemId:"classicficationBtn-other",margin:"10 -1 10 -1",cls:"secondary rly-small",toggleGroup:"classificationView",style:{borderBottomLeftRadius:0,borderTopLeftRadius:0,borderBottomRightRadius:0,borderTopRightRadius:0},toggleHandler:this._tabChange,scope:this},{xtype:"rallybutton",text:"Program",itemId:"classicficationBtn-program",margin:"10 -1 10 -1",cls:"secondary rly-small",iconCls:"icon-portfolio",toggleGroup:"classificationView",style:{borderBottomLeftRadius:0,borderTopLeftRadius:0,borderBottomRightRadius:0,borderTopRightRadius:0},toggleHandler:this._tabChange,scope:this},{xtype:"rallybutton",text:"Inactive",itemId:"classicficationBtn-inactive",margin:"10 25 10 -1",cls:"secondary rly-small",iconCls:"icon-box",toggleGroup:"classificationView",style:{borderBottomLeftRadius:0,borderTopLeftRadius:0},toggleHandler:this._tabChange,scope:this},{xtype:"rallynumberfield",itemId:"iterationsAgo",fieldLabel:"# Iterations Ago",labelAlign:"right",minValue:1,maxValue:this.maxIterationsAgo,margin:10,value:1,emptyText:"Last Iteration",listeners:{scope:this,change:this._updateIterationsAgo}},{xtype:"rallycombobox",store:Ext.create("Rally.data.custom.Store",{data:[{name:"by Points",value:"points"},{name:"by Count",value:"count"}],fields:["name","value"]}),fieldLabel:"Metric",displayField:"name",valueField:"value",itemId:"metric",labelAlign:"right",margin:10,listeners:{scope:this,select:this._updateUsePoints}}];this.callParent([a])},_tabChange:function(a,b){var c=this.query("rallybutton[toggleGroup=classificationView]"),d=this.getSelectedButton();d&&(Ext.Array.each(c,function(a){a&&a.itemId===d.itemId?(a.removeCls("secondary"),a.addCls("primary")):(a.removeCls("primary"),a.addCls("secondary"))},this),this._displaySelectedView())},_updateView:function(){return this.logger.log("_updateView",this.getIterationsAgo(),this.domainProjects),this._clearView(),this.domainProjects?0===this.domainProjects.length?void this.addAppMessage("No projects found in the selected domain."):void this._fetchIterations().then({success:this._fetchClassificationData,failure:this._showErrorNotification,scope:this}):(this.addAppMessage("Project information loading..."),void this._updateDomainProjects())},_fetchClassificationData:function(a){this.projectIterations=a;var b=this.domainProjects;this.logger.log("_fetchClassificationData",a,b),this.setLoading("Fetching Team data..."),CATS.teamassessmentapps.utils.WorkItemUtility.fetchWorkItemInfo(b).then({success:this._initializeData,failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)},_initializeData:function(a){var b=[],c=CATS.teamassessmentapps.utils.WorkItemUtility.calculateWorkItemStats(a,this.getActiveDays());this.logger.log("_initializeData.workItemInfo",c,this.getActiveDays()),Ext.Array.each(this.domainProjects,function(a){var d=this.projectIterations[a.get("Name")],e=Ext.create("Rally.technicalservices.utils.DomainProjectHealthModel",{__iteration:d,__workItemData:c[a.get("Name")]||{},project:a.getData(),team:a.get("Name")});e.initialize(),b.push(e)},this),this.data=b,this.setLoading("Fetching Other and Scrum data..."),Deft.Promise.all([this._fetchOtherData(this.getActiveDays()),this._fetchScrumData(this.projectIterations)],this).then({success:this._displaySelectedView,failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)},_updateUsePoints:function(){var a=this.getUsePoints();this.logger.log("_updateUsePoints",a),Ext.Array.each(this.data,function(a){a.recalculate(this.getUsePoints(),this.getSkipZeroForEstimation(),this.getDoneStates())},this),this._addGrid(this.data)},_updateIterationsAgo:function(){var a=this.getIterationsAgo();this.logger.log("_updateIterationsAgo",a),this.setLoading("Fetching Iterations..."),this._fetchIterations(this.getIterationsAgo()).then({success:this._fetchScrumData,failure:this._showErrorNotification,scope:this})},_fetchOtherData:function(a){var b=Ext.create("Deft.Deferred"),c=_.filter(this.data,function(a){return"other"===a.get("classification")}).map(function(a){return a.get("project").ObjectID});if(c&&c.length>0){var d=_.map(c,function(a){return{property:"Project.ObjectID",value:a}});d=d.length>1?Rally.data.wsapi.Filter.or(d):Ext.create("Rally.data.wsapi.Filter",d[0]);var e=Rally.util.DateTime.toIsoString(Rally.util.DateTime.add(new Date,"day",-a));this.logger.log("_fetchHistory teams",c,e),Deft.Promise.all([this._fetchHistory(e,c),this._fetchWsapiRecords({model:"HierarchicalRequirement",fetch:["FormattedID","PlanEstimate","Project","Name","ScheduleState"],filters:d.and({property:"ScheduleState",value:"Defined"}),sorters:{property:"CreationDate",direction:"ASC"}}),this._fetchWsapiRecords({model:"HierarchicalRequirement",fetch:["FormattedID","PlanEstimate","InProgressDate","AcceptedDate","Project","Name"],filters:d.and({property:"AcceptedDate",operator:">=",value:e}),sorters:{property:"CreationDate",direction:"ASC"}})],this).then({success:function(a){this._processOtherData(a),b.resolve()},failure:b.reject,scope:this})}else b.resolve();return b.promise},_fetchHistory:function(a,b){var c=Ext.create("Deft.Deferred");return Ext.create("Rally.data.lookback.SnapshotStore",{fetch:["FormattedID","PlanEstimate","ScheduleState","_ValidFrom","_ValidTo"],filters:[{property:"Project",operator:"in",value:b},{property:"ScheduleState",value:"In-Progress"},{property:"_ValidTo",operator:">=",value:a},{property:"_TypeHierarchy",operator:"in",value:["HierarchicalRequirement"]}],removeUnauthorizedSnapshots:!0,limit:"Infinity",hydrate:["ScheduleState","Project"],useHttpPost:!0,sorters:[{property:"_ValidTo",direction:"ASC"}]}).load({callback:function(a,b){b.wasSuccessful()?c.resolve(a):c.reject("Error loading history: "+b.error.errors.join(","))}}),c.promise},_processOtherData:function(a){this.logger.log("_processOtherData",a);var b=a[0],c=a[1],d=a[2],e=this._getHashByField(b,"Project","Name"),f=this._getHashByField(c,"Project","Name"),g=this._getHashByField(d,"Project","Name");Ext.Array.each(this.data,function(a){var b=a.get("team"),c="other"===a.get("classification"),d=e[b]||[],h=f[b]||[],i=g[b]||[];c&&a.updateOtherData(d,h,i,this.getActiveDays(),this.getUsePoints(),this.getSkipZeroForEstimation())},this)},_fetchScrumData:function(a){this.projectIterations=a||this.projectIterations;var b=_.filter(this.data,function(a){return"scrum"===a.get("classification")}).map(function(a){return a.get("project").ObjectID}),c=_.filter(a,function(a){return Ext.Array.contains(b,a.Project.ObjectID)});this.setLoading("Fetching Iteration Data..."),Deft.Promise.all([this._fetchIterationCumulativeData(c),this._fetchArtifactData("HierarchicalRequirement",c),this._fetchArtifactData("Defect",c),this._fetchArtifactData("DefectSuite",c),this._fetchArtifactData("TestSet",c)]).then({success:this._processScrumData,failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)},_processScrumData:function(a){var b=a[0],c=a[1].concat(a[2]).concat(a[3]).concat(a[4]);this.logger.log("_processScrumData",b,c);var d=this._getHashByField(b,"IterationObjectID"),e=this._getHashByField(c,"Project","Name");Ext.Array.each(this.data,function(a){var b=a.get("team"),c="scrum"===a.get("classification"),f=this.projectIterations[b],g=f?d[f.ObjectID]||[]:[],h=e[b]||[];c&&a.updateScrumData(f,g,h,this.getUsePoints(),this.getSkipZeroForEstimation(),this.getDoneStates())},this),"scrum"===this.getSelectedTab()&&this._addGrid(this.data)},_clearView:function(){this.clearAppMessage(),this.down("#teamGrid")&&this.down("#teamGrid").destroy(),this.down("#charts")&&this.down("#charts").destroy()},_displaySelectedView:function(){var a=this.getSelectedTab(),b="scrum"===a,c="other"===a,d="summary"===a;return this._clearView(),this.down("#iterationsAgo")&&this.down("#iterationsAgo").setVisible(b),this.down("#metric")&&this.down("#metric").setVisible(b||c||d),"scrum"===a&&this.getIterationsAgo()<1||this.getIterationsAgo()>this.maxIterationsAgo?void this.addAppMessage("Please select a valid # Iterations Ago between 1 and "+this.maxIterationsAgo+"."):void(this.data&&a&&!Ext.isEmpty(this.data)&&this._addGrid(this.data))},_addGrid:function(a){var b=this.getCurrentGridType(),c=this.getSelectedTab();if(this._clearView(),this.logger.log("_addGrid",b,a),filteredData=Ext.Array.filter(a,function(a){return"summary"===c||a.get("classification")===c}),!filteredData||0===filteredData.length)return void this.addAppMessage("No teams found for the selected classification.");"summary"===c&&(filteredData=_.sortBy(filteredData,function(a){return a.get("team")}),this._addSummaryCharts(filteredData));var d=Ext.create("Rally.data.custom.Store",{data:filteredData,model:"Rally.technicalservices.utils.DomainProjectHealthModel",pageSize:filteredData.length});this.add({xtype:b,store:d,usePoints:this.getUsePoints()})},_addSummaryCharts:function(a){var b=this._getChartObjectDef(filteredData,"scrum"),c=this._getChartObjectDef(filteredData,"other");this.add({xtype:"container",itemId:"charts",layout:"hbox",items:[b,c]})},_getChartObjectDef:function(a,b){var c=[Rally.technicalservices.util.HealthRenderers.red,Rally.technicalservices.util.HealthRenderers.yellow,Rally.technicalservices.util.HealthRenderers.green,Rally.technicalservices.util.HealthRenderers.grey],d=this._getChartData(a,b,c),e=b[0].toUpperCase()+b.substring(1);return d?{chartColors:c,xtype:"rallychart",width:"50%",loadMask:!1,chartConfig:{chart:{type:"pie"},title:{text:e,style:{color:"black",fontFamily:"ProximaNovaSemiBold",fontSize:"14px",textTransform:"uppercase"},margin:0},plotOptions:{pie:{showInLegend:!1,size:200,tooltip:{headerFormat:"",pointFormat:'<span style="color:{point.color}">●</span><b>{point.y}</b>'},dataLabels:{enabled:!0,format:"{point.percentage:.1f} %",distance:-25,style:{color:"black",fontFamily:"ProximaNovaSemiBold",fontSize:"14px"}}}}},chartData:d}:{xtype:"container",html:'<div class="no-data-container"><div class="secondary-message">No data for '+e+" teams.</div></div>",width:"33%"}},_getChartData:function(a,b,c){var d=Ext.Array.filter(a,function(a){return a.get("classification")===b}),e=[];return Ext.Array.each(c,function(a){var b=_.reduce(d,function(b,c){var d=c.get("__healthIndex");return b+=d&&d[a]||0},0);e.push(b)}),0===e.length||0===Ext.Array.sum(e)?null:{series:[{name:"Health",colorByPoint:!0,data:e}]}},_export:function(){return this.data?void CArABU.teamassessmentapps.teamhealth.TeamHealthExporter.exportAllData(this.data,this.getUsePoints()):void Rally.ui.notify.Notifier.showWarning({message:"No data to export."})},_getProjectIterations:function(a,b){var c={};return b||(b=1),Ext.Array.each(a,function(a){c[a.get("Project").Name]||(c[a.get("Project").Name]=[]),c[a.get("Project").Name].push(a.getData())}),Ext.Object.each(c,function(a,d){d.length>=b?c[a]=d[b-1]:c[a]=null}),c},_fetchIterationCumulativeData:function(a){this.logger.log("_fetchIterationCumulativeData",a);var b=_.reduce(a,function(a,b,c){return b&&a.push({property:"IterationObjectID",value:b.ObjectID}),a},[]);return b.length>1&&(b=Rally.data.wsapi.Filter.or(b)),0===b.length&&(b=[{property:"ObjectID",value:0}]),this._fetchWsapiRecords({model:"IterationCumulativeFlowData",fetch:["IterationObjectID","CardCount","CardEstimateTotal","CardState","CardToDoTotal","TaskEstimateTotal","CreationDate"],filters:b,sorters:{property:"CreationDate",direction:"ASC"}})},_fetchIterations:function(a){var b=Ext.create("Deft.Deferred");a||(a=1),this.logger.log("_fetchIterations",this.domainProjects);var c=Ext.Array.map(this.domainProjects,function(a){return{property:"Project.ObjectID",value:a.get("ObjectID")}});c.length>1&&(c=Rally.data.wsapi.Filter.or(c)),1===c.length&&(c=Ext.create("Rally.data.wsapi.Filter",c[0])),c=c.and({property:"EndDate",operator:"<",value:Rally.util.DateTime.toIsoString(new Date)});var d=this.domainProjects.length*a;return this.logger.log("_fetchIterations",d),this._fetchWsapiRecords({model:"Iteration",fetch:["ObjectID","Name","StartDate","EndDate","Project","PlannedVelocity","PlanEstimate"],filters:c,sorters:{property:"EndDate",direction:"DESC"},pageSize:d,limit:d}).then({success:function(c){var d=this._getProjectIterations(c,a);b.resolve(d)},failure:this._showErrorNotification,scope:this}),b.promise},_fetchArtifactData:function(a,b){var c=_.reduce(b,function(a,b,c){return b&&a.push({property:"Iteration.ObjectID",value:b.ObjectID}),a},[]);return this.logger.log("_fetchArtifactData",c),c.length>1&&(c=Rally.data.wsapi.Filter.or(c)),0===c.length&&(c=[{property:"ObjectID",value:0}]),this._fetchWsapiRecords({model:a,fetch:["ObjectID","PlanEstimate","AcceptedDate","ScheduleState","Project","Name","Iteration"],filters:c})},_getHashByField:function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e].getData(),g=c?f[b][c]:f[b];d[g]||(d[g]=[]),d[g].push(f)}return d},_getRangeFromSettings:function(a,b){var c=a[b];return Ext.isArray(c)||(c=c.split(",")),Ext.Array.map(c,function(a){return Number(a)})},_setThreshholds:function(a){var b=this._getRangeFromSettings(a,"ratioInProgress");Rally.technicalservices.util.HealthRenderers.metrics.__ratioInProgress.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__ratioInProgress.yellow=b[1];var b=this._getRangeFromSettings(a,"acceptedAfterSprintEnd");Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAfterSprintEnd.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAfterSprintEnd.yellow=b[1];var b=this._getRangeFromSettings(a,"acceptedAtSprintEnd");Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAtSprintEnd.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAtSprintEnd.yellow=b[0];var b=this._getRangeFromSettings(a,"ratioEstimated");Rally.technicalservices.util.HealthRenderers.metrics.__ratioEstimated.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__ratioEstimated.yellow=b[0];var b=this._getRangeFromSettings(a,"planned");Rally.technicalservices.util.HealthRenderers.metrics.__planned.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__planned.yellow=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__currentPlanned.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__currentPlanned.yellow=b[0];var b=this._getRangeFromSettings(a,"velocity");Rally.technicalservices.util.HealthRenderers.metrics.__velocity.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__velocity.yellow=b[0];var b=this._getRangeFromSettings(a,"addedScope");Rally.technicalservices.util.HealthRenderers.metrics.__addedScope.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__addedScope.yellow=b[1];var b=this._getRangeFromSettings(a,"removedScope");Rally.technicalservices.util.HealthRenderers.metrics.__removedScope.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__removedScope.yellow=b[1];var b=this._getRangeFromSettings(a,"netChurn");Rally.technicalservices.util.HealthRenderers.metrics.__netChurn.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__netChurn.yellow=b[1];var b=this._getRangeFromSettings(a,"plannedLoad");Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.yellow=b[0];var b=this._getRangeFromSettings(a,"sdCycleTime");Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.yellow=b[1];var b=this._getRangeFromSettings(a,"sdWIP");Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__plannedLoad.yellow=b[1]},getSelectedButton:function(){var a=this.query("rallybutton[toggleGroup=classificationView]"),b=_.find(a,function(a){return a.pressed});return b||null},getSelectedTab:function(){var a=this.getSelectedButton();if(a){var b=a.itemId.split("-");if(2===b.length)return b[1]}return null},getIterationsAgo:function(){return this.down("#iterationsAgo")&&this.down("#iterationsAgo").getValue()||0},getShowTimebox:function(){return!1},getCurrentGrid:function(){return this.down("#teamGrid")||null},getCurrentGridType:function(){return this.getSelectedTab()+"grid"},getUsePoints:function(){return"points"===this.down("#metric").getValue()},getActiveDays:function(){return this.getSetting("activeDays")||14},getSkipZeroForEstimation:function(){return!1},getDoneStates:function(){return this.doneStates},getSettingsFields:function(){var a=this.callParent(),b=this.getSettings();a.push({xtype:"rallynumberfield",name:"activeDays",fieldLabel:"Active Days",minValue:1,maxValue:365});var c=this._getRangeFromSettings(b,"ratioEstimated");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Ratio Estimated  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"ratioEstimated",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Ratio Estimated  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"acceptedAtSprintEnd");a.push({xtype:"multislider",
fieldLabel:Ext.String.format('Accepted at Sprint End  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelCls:"sliderlabel",labelAlign:"top",name:"acceptedAtSprintEnd",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Accepted at Sprint End   <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"planned");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Planned  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"planned",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Planned  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"velocity");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Actual  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"velocity",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Actual  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"ratioInProgress");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Ratio In Progress  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"ratioInProgress",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Ratio In Progress  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"acceptedAfterSprintEnd");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Accepted after Sprint End  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"acceptedAfterSprintEnd",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Accepted after Sprint End  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"addedScope");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Added Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelCls:"sliderlabel",labelAlign:"top",name:"addedScope",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Added Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"removedScope");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Removed Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelCls:"sliderlabel",name:"removedScope",labelAlign:"top",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Removed Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"netChurn");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Net Churn  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelCls:"sliderlabel",name:"netChurn",labelAlign:"top",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Net Churn  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"plannedLoad");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Planned Load  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"plannedLoad",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Planned Load  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"sdCycleTime");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Cycle Time CoV  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"sdCycleTime",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Cycle Time CoV  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"sdWIP");return a.push({xtype:"multislider",fieldLabel:Ext.String.format('WIP CoV  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"sdWIP",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('WIP CoV  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}}),a}});
            
               Rally.launchApp('team-health', {
                   name: 'Team Domain Health'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.sliderlabel
{
  font-size: 14px;
  text-transform: uppercase;
  color: #000;
    clear:both;
    font-family: ProximaNova;
}
.sliderlabel .pct
{
  float: right;
  font-size: 12px;
  color: #333;
  text-transform: lowercase;

}
.x-column-header-text {
   cursor: pointer;
}

.team-label {
    font-size: 14px;
    padding-right: 5px;
}

.inactive {
  color: #888;
}

    </style>

</head>
<body></body>
</html>