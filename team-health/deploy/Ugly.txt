<!DOCTYPE html>
<html>
<head>
    <title>Team Domain Health</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sat Jul 29 2017 10:13:55 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Jul 29 2017 10:13:55 GMT-0600 (MDT)";
        var STORY    = "US1658";
        var BUILDER  = "corkr03";
        var CHECKSUM = 59167788162;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("CATS.teamassessmentapps.app.DomainApp",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},config:{defaultSettings:{projectDomainField:null,useDashboardTimeboxScope:!1}},launch:function(){this.logger.log("launch",this.getSettings()),this._initializeApp()},getShowTimebox:function(){return!0},getProjectDomainField:function(){return this.logger.log("getProjectDomainField",this.getSetting("projectDomainField")),this.getSetting("projectDomainField")||null},getUseDashboardTimeboxScope:function(){var a=this.getSetting("useDashboardTimeboxScope")||"false";return this.getContext().getTimeboxScope()?a===!0||"true"===a.toLowerCase():!1},getTimebox:function(){if(this.logger.log("getTimebox",this.getUseDashboardTimeboxScope(),this.getContext().getTimeboxScope()),this.getUseDashboardTimeboxScope()){var a="StartDate",b="EndDate";return"release"===this.getContext().getTimeboxScope().type.toLowerCase()&&(a="ReleaseStartDate",b="ReleaseDate"),{startDate:this.getContext().getTimeboxScope().getRecord().get(a),endDate:this.getContext().getTimeboxScope().getRecord().get(b)}}return{startDate:this.down("#startDate").getValue(),endDate:new Date}},onTimeboxScopeChange:function(a){this.getContext().setTimeboxScope(a),this.logger.log("onTimeboxScopeChange",a,this.getUseDashboardTimeboxScope(),a.getRecord()),this.getUseDashboardTimeboxScope()&&(a.getRecord()?this._updateView():Rally.ui.notify.Notifier.showWarning({message:"Please select a timebox."}))},_initializeApp:function(a){this.logger.log("_initializeApp",a),this.removeAll();var b=this.add({itemId:"selectorBox",xtype:"container",layout:"hbox"});if(this.getProjectDomainField()){var c=b.add({xtype:"rallyfieldvaluecombobox",fieldLabel:"Team Domain",labelAlign:"right",model:"Project",margin:10,field:this.getProjectDomainField(),allowNoEntry:!0,noEntryText:"-- Follow Project Scope --"});c.on("select",this._updateDomainProjects,this)}if(a&&Ext.Array.each(a,function(a){b.add(a)}),!this.getUseDashboardTimeboxScope()&&this.getShowTimebox()){var d=b.add({xtype:"rallydatefield",itemId:"startDate",fieldLabel:"Start Date",labelAlign:"right",margin:10,value:Rally.util.DateTime.add(new Date,"day",-14)});d.on("select",this._updateView,this)}var e=b.add({xtype:"rallybutton",iconCls:"icon-export",margin:10,cls:"secondary rly-small"});e.on("click",this._export,this),this._updateDomainProjects()},_export:function(){this._showErrorNotification("Please implement the _export method.")},_updateDomainProjects:function(a){var b=a&&a.getValue();if(this.logger.log("_updateView",b),b){var c=[{property:"State",value:"Open"},{property:this.getProjectDomainField(),value:b}];this.logger.log("Project Filters",c),this._fetchWsapiRecords({model:"Project",filters:c}).then({success:function(a){this.domainProjects=a,this._updateView()},failure:this._showErrorNotification,scope:this})}else{this.domainProjects=null;for(var d=[],e=["Parent"],f=this.getContext().getProject()._ref,g=0;8>g;g++)d.push({property:e.join("."),value:f}),e.push("Parent");d.push({property:"ObjectID",value:this.getContext().getProject().ObjectID}),d=Rally.data.wsapi.Filter.or(d),d.and({property:"State",value:"Open"}),this.logger.log("Project Filters",d.toString()),this._fetchWsapiRecords({model:"Project",filters:d}).then({success:function(a){this.domainProjects=a,this._updateView()},failure:this._showErrorNotification,scope:this})}},_updateView:function(){this._showErrorNotification("Please implement the _updateView method.")},_showErrorNotification:function(a){this.setLoading(!1),Rally.ui.notify.Notifier.showError({message:a})},_fetchWsapiRecords:function(a){var b=Ext.create("Deft.Deferred");return a.limit||(a.limit="Infinity"),a.pageSize||(a.pageSize=2e3),a.enablePostGet=!0,a.context={project:null},Ext.create("Rally.data.wsapi.Store",a).load({callback:function(a,c,d){d?b.resolve(a):b.reject(c.error.errors.join(","))}}),b},getSettingsFields:function(){var a=[{xtype:"rallyfieldcombobox",fieldLabel:"Project Domain Field",model:"Project",labelWidth:150,labelAlign:"right",labelCls:"sliderlabel",name:"projectDomainField",allowBlank:!0,noEntryText:"-- Follow Project Scope --",emptyText:"-- Follow Project Scope --",_isNotHidden:function(a){return a&&!a.readOnly&&a.attributeDefinition&&a.attributeDefinition.Constrained&&a.attributeDefinition.Custom?!0:!1},listeners:{ready:function(a){a.getStore().add({name:"-- Follow Project Scope --",value:null})}}}];return this.getShowTimebox()&&a.push({xtype:"rallycheckboxfield",fieldLabel:"Follow Dashboard Timebox Scope",name:"useDashboardTimeboxScope"}),a},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{})},isExternal:function(){return"undefined"==typeof this.getAppId()},_fetchDoneStates:function(){var a=Ext.create("Deft.Deferred");return Rally.data.ModelFactory.getModel({type:"HierarchicalRequirement",success:function(b){var c=b.getField("ScheduleState");c.getAllowedValueStore().load({callback:function(b,c,d){if(d){for(var e=[],f=b.length-1;f>0;f--)e.push(b[f].get("StringValue")),"Accepted"==b[f].get("StringValue")&&(f=0);a.resolve(e)}else a.reject("Error loading ScheduleState values for User Story:  "+c.error.errors.join(","))},scope:this})},failure:function(){var b="Could not load schedule states";a.reject(b)}}),a.promise}}),Ext.define("CATS.teamassessmentapps.utils.Toolbox",{singleton:!0,saveCSVToFile:function(a,b,c){void 0===c&&(c={type:"text/csv;charset=utf-8"}),this.saveAs(a,b,c)},saveAs:function(a,b){if(Ext.isIE9m)return void Rally.ui.notify.Notifier.showWarning({message:"Export is not supported for IE9 and below."});var c=null;try{c=new Blob([a],{type:"text/plain"})}catch(d){window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,window.BlobBuilder&&"TypeError"==d.name&&(bb=new BlobBuilder,bb.append([a]),c=bb.getBlob("text/plain"))}if(!c)return void Rally.ui.notify.Notifier.showWarning({message:"Export is not supported for this browser."});var e=b;if(Ext.isIE10p)return void window.navigator.msSaveOrOpenBlob(c,e);var f=this.createObjectURL(c);if(f){var g=document.createElement("a");"download"in g?g.download=e:g.target="_blank",g.innerHTML="Download File",g.href=f,Ext.isChrome||(g.onclick=this.destroyClickedElement,g.style.display="none",document.body.appendChild(g)),g.click()}else Rally.ui.notify.Notifier.showError({message:"Export is not supported "})},createObjectURL:function(a){return window.webkitURL?window.webkitURL.createObjectURL(a):window.URL&&window.URL.createObjectURL?window.URL.createObjectURL(a):null},destroyClickedElement:function(a){document.body.removeChild(a.target)}}),Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("Rally.technicalservices.util.Health",{singleton:!0,getScopeAdditions:function(a){var b=[],c=_.keys(a);_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});for(var d=0,e=0;e<b.length-1;e++)b[e+1]>b[e]&&(d+=b[e+1]-b[e]);return d},getScopeRemovals:function(a){var b=[],c=_.keys(a);_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});for(var d=0,e=0;e<b.length-1;e++)b[e]>b[e+1]&&(d+=b[e]-b[e+1]);return isNaN(d)?-1:d},getStandardDeviation:function(a){var b=Ext.Array.mean(a),c=0;Ext.Array.each(a,function(a){c+=(b-a)*(b-a)});var d=Math.sqrt(c/a.length);return d},getChurnDirection:function(a){var b=0,c=0;return Ext.Array.each(a,function(a,d){d>0&&(b+=a-c),c=a}),b&&0!==b?b/Math.abs(b):1},getChurn:function(a){var b=[],c=_.keys(a),d=0;_.each(c,function(c){b.push(Rally.technicalservices.util.Health.getDayTotal(a,c))});var e=Rally.technicalservices.util.Health.getStandardDeviation(b);e>=0&&0!=Ext.Array.mean(b)&&(d=Ext.util.Format.number(e/Ext.Array.mean(b),"0.00"));var f=Rally.technicalservices.util.Health.getChurnDirection(b),g=d*f;return isNaN(g)?null:d*f},getDayTotal:function(a,b){return a[b]?Ext.Array.sum(_.values(a[b])):0},getTaskChurn:function(a){var b=null,c=null,d=_.keys(a);return _.each(d,function(d){null!=c&&(b=c),c=Rally.technicalservices.util.Health.getDayTotal(a,d)}),null==c||null==b||0==c&&0==b?null:Ext.util.Format.number((c-b)/b,"0.00")},getAverageInState:function(a,b){var c=[],d=_.keys(a);return _.each(d,function(d){var e=Ext.Array.sum(_.values(a[d])),f=a[d][b]||0;e>0?c.push(f/e):c.push(0)}),Ext.util.Format.number(Ext.Array.mean(c),"0.00")},getDayTotalsArray:function(a){var b=[];return _.each(a,function(c,d){b.push(Rally.technicalservices.util.Health.getDayTotal(a,d))}),b},getDoneStatesHash:function(a,b){var c={};return _.each(a,function(a,d){c[d]=0,_.each(b,function(b){c[d]+=a[b]||0})}),c},getAllHash:function(a){var b={};return _.each(a,function(c,d){b[d]=Rally.technicalservices.util.Health.getDayTotal(a,d)}),b},getVelocity:function(a,b){var c=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),d=_.sortBy(_.keys(c),function(a){return Date.parse(a)});return c[d[d.length-1]]||0},getPlanned:function(a){var b=_.sortBy(_.keys(a),function(a){return Date.parse(a)}),c=_.values(a[b[0]]);return console.log("day_0",a[b[0]],c),Ext.Array.sum(c)||0},getHalfAcceptanceRatio:function(a,b,c){var d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=Rally.technicalservices.util.Health.getAllHash(a),f=-1,g=0,h=null,i=_.sortBy(_.keys(e),function(a){return Date.parse(a)});_.each(i,function(a){g++;var b=e[a]||0,c=d[a]||0;c/b>=.5&&-1===f?(f=g,h=a):.5>c/b&&f>-1&&(f=-1,h=null)});var j=2;return f>-1&&(c>-1&&(g=c),j=Ext.util.Format.number(f/g,"0.00")),{Ratio:j,ratioDate:h}},getIncompletionRatio:function(a,b,c){var d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=_.keys(a),f=e.pop(),g=Rally.technicalservices.util.Health.getDayTotal(a,f),h=d[f],i=a[f]&&a[f][c]||0,j=2;g>0&&(j=1-(i+h)/g),j=Ext.util.Format.number(j,"0.00");var k=2;return g>0&&(k=Ext.util.Format.number(1-j,"0.00")),{CompletionRatio:k,IncompletionRatio:j}},getVelocityVariance:function(a,b,c){if(b&&b.length>=c){var d=Ext.Array.mean(b),e=0;if(d>0)return e=Number(a/d-1)}return null},getAcceptanceRatio:function(a,b){var c=2,d=Rally.technicalservices.util.Health.getDoneStatesHash(a,b),e=_.keys(a),f=e.pop(),g=Rally.technicalservices.util.Health.getDayTotal(a,f),h=d[f]||0;return g>0&&(c=h/g),c=Ext.util.Format.number(c,"0.00")},daysBetween:function(a,b,c){var d=Ext.clone(a),e=Ext.clone(b);if(d==e)return 0;if("number"==typeof d&&(d=new Date(d)),"number"==typeof e&&(e=new Date(e)),c){if(d>e){var f=e;e=d,d=f}for(var g=0,h=d;e>h;){var i=h.getDay();0!=i&&6!=i&&g++;var j=Rally.util.DateTime.add(h,"day",1);h=j}return g}return Math.abs(Rally.util.DateTime.getDifference(d,e,"day"))}}),Ext.define("Rally.technicalservices.utils.DomainProjectHealthModel",{extend:"Ext.data.Model",logger:new Rally.technicalservices.Logger,fields:[{name:"team"},{name:"__iteration",type:"object"},{name:"__cfdRecords",type:"object"},{name:"__artifacts",type:"object"},{name:"__ratioEstimated",defaultValue:-1},{name:"__plannedVelocity",convert:function(a,b){return b.get("__iteration")&&b.get("__iteration").PlannedVelocity?b.get("__iteration").PlannedVelocity:"--"}},{name:"__planned",defaultValue:-1},{name:"__currentPlanned",defaultValue:-1},{name:"__velocity",defaultValue:-1},{name:"__acceptedAfterSprintEnd",defaultValue:-1},{name:"__acceptedAfterSprintEnd",defaultValue:-1},{name:"__addedScope",defaultValue:-1},{name:"__removedScope",defaultValue:-1},{name:"__days",convert:function(a,b){return b.get("__iteration")&&b.get("__iteration").EndDate&&b.get("__iteration").EndDate?Rally.technicalservices.util.Health.daysBetween(b.get("__iteration").EndDate,b.get("__iteration").StartDate,!0):"--"}},{name:"__ratioInProgress",defaultValue:-1},{name:"__currentVelocity",defaultValue:-2}],calculate:function(a,b,c){this.resetDefaults(),this.get("__cfdRecords")&&this._processCFD(this.get("__cfdRecords"),this.get("__iteration"),a,c),this.get("__artifacts")&&this._mungeArtifacts(this.get("__artifacts"),a)},resetDefaults:function(){this.set("__ratioEstimated",-1),this.set("__planned",-1),this.set(NaN),this.set("__acceptedAfterSprintEnd",-1),this.set("__acceptedAtSprintEnd",-1),this.set("__addedScope",-1),this.set("__removedScope",-1)},_setError:function(){var a="Error";this.set("__ratioEstimated",a),this.set("__planned",a),this.set("__velocity",a),this.set("__acceptedAfterSprintEnd",a),this.set("__acceptedAtSprintEnd",a),this.set("__addedScope",a),this.set("__removedScope",a)},_processCFD:function(a,b,c,d){var e={},f={};Ext.Array.each(a,function(a){var b=a.CreationDate;if(this._isValidDate(b)){var d=a.CardEstimateTotal||0,g=a.CardState,h=a.TaskEstimateTotal||0;c===!1&&(d=a.CardCount||0),e[b]||(e[b]={}),f[b]||(f[b]={}),e[b][g]||(e[b][g]=0),f[b][g]||(f[b][g]=0),e[b][g]+=d,f[b][g]+=h}},this);var g="In-Progress",h=(this.get("__days"),Rally.technicalservices.util.Health.getAverageInState(e,g));h>0&&this.set("__ratioInProgress",h);var i=Rally.technicalservices.util.Health.getScopeAdditions(e,c);this.set("__addedScope",i);var j=Rally.technicalservices.util.Health.getScopeRemovals(e,c);this.set("__removedScope",j);var k=Rally.technicalservices.util.Health.getVelocity(e,d);this.set("__velocity",k);var l=Rally.technicalservices.util.Health.getPlanned(e);this.set("__planned",l)},_isValidDate:function(a){return!a||a.getDay()>0&&a.getDay()<6?this.get("EndDate")&&this.get("StartDate")?a<=this.get("EndDate")&&a>=this.get("StartDate"):!0:!1},_mungeArtifacts:function(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,i=0;Ext.Array.each(a,function(a){var j=a.PlanEstimate;g+=j||0,f++,(!Ext.isEmpty(j)&&j>=0||!b)&&(c++,a.AcceptedDate&&(d+=j,i++,a.AcceptedDate<=this.get("__iteration").EndDate&&(e+=j,h++)))},this),b?(this.set("__currentPlanned",g),g&&(this.set("__acceptedAfterSprintEnd",(d-e)/g),this.set("__acceptedAtSprintEnd",e/g))):(this.set("__currentPlanned",f),f&&(this.set("__acceptedAfterSprintEnd",(i-h)/f),this.set("__acceptedAtSprintEnd",h/f))),f>0&&this.set("__ratioEstimated",c/f)}}),Ext.define("Rally.technicalservices.util.HealthRenderers",{singleton:!0,red:"#ff9999",yellow:"#ffffcc",green:"#ccffcc",grey:"#e6e6e6",metrics:{__ratioInProgress:{green:0,yellow:0,reversed:!0},__acceptedAfterSprintEnd:{green:0,yellow:0,reversed:!0},__acceptedAtSprintEnd:{green:0,yellow:0},__ratioEstimated:{green:0,yellow:0},__planned:{green:0,yellow:0},__currentPlanned:{green:0,yellow:0},__velocity:{green:0,yellow:0},__addedScope:{green:0,yellow:0,reversed:!0},__removedScope:{green:0,yellow:0,reversed:!0}},getCellColor:function(a,b){var c=Rally.technicalservices.util.HealthRenderers.metrics[b];if(!c)return Rally.technicalservices.util.HealthRenderers.grey;if(a=100*a,c.reversed)return a<=c.green?Rally.technicalservices.util.HealthRenderers.green:a<=c.yellow?Rally.technicalservices.util.HealthRenderers.yellow:Rally.technicalservices.util.HealthRenderers.red;var d=Rally.technicalservices.util.HealthRenderers.red,e=100+(100-c.green),f=100+(100-c.yellow);return a>c.green&&e>a?d=Rally.technicalservices.util.HealthRenderers.green:a>c.yellow&&f>a&&(d=Rally.technicalservices.util.HealthRenderers.yellow),d}}),Ext.define("team-health",{extend:"CATS.teamassessmentapps.app.DomainApp",maxIterationsAgo:9,doneStates:["Accepted"],config:{defaultSettings:{ratioInProgress:"30,60",ratioEstimated:"75,90",acceptedAfterSprintEnd:"10,25",acceptedAtSprintEnd:"75,90",planned:"75,90",velocity:"75,90",addedScope:"10,25",removedScope:"10,25"}},launch:function(){this.logger.log("launch",this.getSettings()),this._setThreshholds(this.getSettings()),this._fetchDoneStates().then({success:function(a){this.doneStates=a,this.logger.log("doneState",this.doneStates),this._initializeApp()},failure:this._showErrorNotification,scope:this})},_getRangeFromSettings:function(a,b){var c=a[b];return Ext.isArray(c)||(c=c.split(",")),this.logger.log("_getRangeFromSettings",c),Ext.Array.map(c,function(a){return Number(a)})},_setThreshholds:function(a){var b=this._getRangeFromSettings(a,"ratioInProgress");Rally.technicalservices.util.HealthRenderers.metrics.__ratioInProgress.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__ratioInProgress.yellow=b[1];var b=this._getRangeFromSettings(a,"acceptedAfterSprintEnd");Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAfterSprintEnd.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAfterSprintEnd.yellow=b[1];var b=this._getRangeFromSettings(a,"acceptedAtSprintEnd");Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAtSprintEnd.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__acceptedAtSprintEnd.yellow=b[0];var b=this._getRangeFromSettings(a,"ratioEstimated");Rally.technicalservices.util.HealthRenderers.metrics.__ratioEstimated.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__ratioEstimated.yellow=b[0];var b=this._getRangeFromSettings(a,"planned");Rally.technicalservices.util.HealthRenderers.metrics.__planned.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__planned.yellow=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__currentPlanned.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__currentPlanned.yellow=b[0];var b=this._getRangeFromSettings(a,"velocity");Rally.technicalservices.util.HealthRenderers.metrics.__velocity.green=b[1],Rally.technicalservices.util.HealthRenderers.metrics.__velocity.yellow=b[0];var b=this._getRangeFromSettings(a,"addedScope");Rally.technicalservices.util.HealthRenderers.metrics.__addedScope.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__addedScope.yellow=b[1];var b=this._getRangeFromSettings(a,"removedScope");Rally.technicalservices.util.HealthRenderers.metrics.__removedScope.green=b[0],Rally.technicalservices.util.HealthRenderers.metrics.__removedScope.yellow=b[1]},_initializeApp:function(){var a=[{xtype:"rallynumberfield",itemId:"iterationsAgo",fieldLabel:"# Iterations Ago",labelAlign:"right",minValue:1,maxValue:this.maxIterationsAgo,margin:10,emptyText:"Last Iteration",listeners:{scope:this,change:this._updateView}},{xtype:"rallycombobox",store:Ext.create("Rally.data.custom.Store",{data:[{name:"by Points",value:"points"},{name:"by Count",value:"count"}],fields:["name","value"]}),fieldLabel:"Metric",displayField:"name",valueField:"value",itemId:"metric",labelAlign:"right",margin:10,listeners:{scope:this,select:this._updateGrid}}];this.logger.log("selectors",a),this.callParent([a])},getIterationsAgo:function(){return this.down("#iterationsAgo")&&this.down("#iterationsAgo").getValue()||0},getShowTimebox:function(){return!1},_updateView:function(){this.logger.log("_updateView",this.getIterationsAgo()),this.getIterationsAgo()<1||this.getIterationsAgo()>this.maxIterationsAgo||(this.setLoading("Fetching Iterations..."),this._fetchIterations(this.getIterationsAgo()).then({success:this._fetchData,failure:this._showErrorNotification,scope:this}))},_fetchData:function(a){this.logger.log("_fetchData",a);var b=this._getProjectIterations(a,this.getIterationsAgo());this.projectIterations=b,this.setLoading("Fetching Iteration Data..."),Deft.Promise.all([this._fetchIterationCumulativeData(b),this._fetchArtifactData("HierarchicalRequirement",b),this._fetchArtifactData("Defect",b),this._fetchArtifactData("DefectSuite",b),this._fetchArtifactData("TestSet",b)]).then({success:this._processData,failure:this._showErrorNotification,scope:this}).always(function(){this.setLoading(!1)},this)},getUsePoints:function(){return"points"===this.down("#metric").getValue()},getSkipZeroForEstimation:function(){return!1},getDoneStates:function(){return this.doneStates},_getHashByField:function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e].getData(),g=c?f[b][c]:f[b];d[g]||(d[g]=[]),d[g].push(f)}return d},_processData:function(a){var b=a[0],c=a[1].concat(a[2]).concat(a[3]).concat(a[4]);this.logger.log("_processData",b,c);var d=this._getHashByField(b,"IterationObjectID"),e=this._getHashByField(c,"Project","Name");this.logger.log("_proecessData cfdHash",d);var f=[];Ext.Array.each(this.domainProjects,function(a){var b=this.projectIterations[a.get("Name")],c=b?d[b.ObjectID]||[]:[],g=e[a.get("Name")]||[],h=Ext.create("Rally.technicalservices.utils.DomainProjectHealthModel",{__cfdRecords:c,__iteration:b,__artifacts:g,team:a.get("Name")});h.calculate(this.getUsePoints(),this.getSkipZeroForEstimation(),this.getDoneStates()),f.push(h)},this),this._buildGrid(f)},_updateGrid:function(){var a=this.getUsePoints();if(this.logger.log("_updateGrid",a),this.down("rallygrid")){var b=this.down("rallygrid").getStore();b.each(function(a){a.calculate(this.getUsePoints(),this.getSkipZeroForEstimation(),this.getDoneStates())},this),this.down("rallygrid")&&this.down("rallygrid").destroy(),this.add({xtype:"rallygrid",store:b,columnCfgs:this._getColumnCfgs(a),showPagingToolbar:!1,showRowActionsColumn:!1,enableBulkEdit:!1})}},_buildGrid:function(a){this.logger.log("_buildGrid",a);var b=Ext.create("Rally.data.custom.Store",{data:a,model:"Rally.technicalservices.utils.DomainProjectHealthModel",pageSize:a.length});this.down("rallygrid")&&this.down("rallygrid").destroy(),this.add({xtype:"rallygrid",store:b,columnCfgs:this._getColumnCfgs(this.getUsePoints()),showPagingToolbar:!1,showRowActionsColumn:!1,enableBulkEdit:!1})},_getColumnCfgs:function(a){var b=this.down("#metric").getRecord().get("name"),c=[{dataIndex:"team",text:"Team",flex:1},{dataIndex:"__iteration",text:"Iteration",flex:1,renderer:function(a,b,c){return a&&a.Name?a.Name:"--"}}];return this.getUsePoints()?(c.push({dataIndex:"__plannedVelocity",text:"Iteration Planned Velocity",align:"center"}),c.push({dataIndex:"__ratioEstimated",text:"% Items Estimated",align:"center",renderer:this._percentRenderer}),c.push({dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b),align:"center",renderer:this._pointsPctRenderer}),c.push({dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b),align:"center",renderer:this._pointsPctRenderer}),c.push({dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b),align:"center",renderer:this._pointsPctRenderer})):(c.push({dataIndex:"__planned",text:Ext.String.format("Actual Planned At Sprint Start ({0})",b),align:"center"}),c.push({dataIndex:"__currentPlanned",text:Ext.String.format("Current Planned ({0})",b),align:"center"}),c.push({dataIndex:"__velocity",text:Ext.String.format("Actual Accepted At Sprint End ({0})",b),align:"center"})),c=c.concat([{dataIndex:"__ratioInProgress",text:Ext.String.format("% Average Daily in Progress ({0})",b),align:"center",renderer:this._percentRenderer},{dataIndex:"__acceptedAtSprintEnd",text:Ext.String.format("% Accepted by Sprint End ({0})",b),align:"center",renderer:this._percentRenderer},{dataIndex:"__acceptedAfterSprintEnd",text:Ext.String.format("% Accepted after Sprint End ({0})",b),align:"center",renderer:this._percentRenderer},{dataIndex:"__addedScope",text:Ext.String.format("Added Scope ({0})",b),align:"center",renderer:this._scopeRenderer},{dataIndex:"__removedScope",text:Ext.String.format("Removed Scope ({0})",b),align:"center",renderer:this._scopeRenderer}])},_percentRenderer:function(a,b,c,d,e){var f=this.columns[e].dataIndex;if(a>=0&&2>a){var g=Rally.technicalservices.util.HealthRenderers.getCellColor(a,f);return b.style="padding-right:7px;text-align:center;background-color:"+g,Math.round(100*a)+" %"}return"--"},_scopeRenderer:function(a,b,c,d,e){var f=c.get("__planned"),g=f?a/f:-1,h=this.columns[e].dataIndex;if(g>=0){var i=Rally.technicalservices.util.HealthRenderers.getCellColor(g,h);return b.style="padding-right:7px;text-align:center;background-color:"+i,a}return a},_pointsPctRenderer:function(a,b,c,d,e){var f=c.get("__iteration")&&c.get("__iteration").PlannedVelocity,g=f?a/f:-1,h=this.columns[e].dataIndex;if(g>=0){var i=Rally.technicalservices.util.HealthRenderers.getCellColor(g,h);return b.style="padding-right:7px;text-align:center;background-color:"+i,a}return"--"},_export:function(){if(this.down("rallygrid")){var a=this.down("rallygrid").getStore(),b=this._getColumnCfgs(this.getUsePoints()),c=[_.pluck(b,"text").join(",")];a.each(function(a){var d=[];Ext.Array.each(b,function(b){var c=a.get(b.dataIndex);Ext.isObject(c)&&(c=c._refObjectName||c.Name),0>c&&(c=""),d.push(c)}),c.push(d.join(","))});var d=c.join("\r\n"),e=Ext.String.format("health-{0}.csv",Rally.util.DateTime.format(new Date,"Y-m-d-h-i-s"));CATS.teamassessmentapps.utils.Toolbox.saveAs(d,e)}},_getProjectIterations:function(a,b){var c={};return Ext.Array.each(a,function(a){c[a.get("Project").Name]||(c[a.get("Project").Name]=[]),c[a.get("Project").Name].push(a.getData())}),this.logger.log("_getProjectIterations",c),Ext.Object.each(c,function(a,d){d.length<=b?c[a]=d[b-1]:c[a]=null}),c},_fetchIterationCumulativeData:function(a){this.logger.log("_fetchIterationCumulativeData",a);var b=_.reduce(a,function(a,b,c){return b&&a.push({property:"IterationObjectID",value:b.ObjectID}),a},[]);return b.length>1&&(b=Rally.data.wsapi.Filter.or(b)),0===b.length&&(b=[{property:"ObjectID",value:0}]),this._fetchWsapiRecords({model:"IterationCumulativeFlowData",fetch:["IterationObjectID","CardCount","CardEstimateTotal","CardState","CardToDoTotal","TaskEstimateTotal","CreationDate"],filters:b,sorters:{property:"CreationDate",direction:"ASC"}})},_fetchIterations:function(a){this.logger.log("_fetchIterations",this.domainProjects);var b=Ext.Array.map(this.domainProjects,function(a){return{property:"Project.ObjectID",value:a.get("ObjectID")}});b=Rally.data.wsapi.Filter.or(b),b=b.and({property:"EndDate",operator:"<",value:Rally.util.DateTime.toIsoString(new Date)});var c=this.domainProjects.length*a;return this._fetchWsapiRecords({model:"Iteration",fetch:["ObjectID","Name","StartDate","EndDate","Project","PlannedVelocity"],filters:b,sorters:{property:"EndDate",direction:"DESC"},pageSize:c,limit:c})},_fetchArtifactData:function(a,b){this.logger.log("_fetchArtifactData",a,b);var c=_.reduce(b,function(a,b,c){return b&&a.push({property:"Iteration.ObjectID",value:b.ObjectID}),a},[]);return this.logger.log("_fetchArtifactData",c),c.length>1&&(c=Rally.data.wsapi.Filter.or(c)),0===c.length&&(c=[{property:"ObjectID",value:0}]),this._fetchWsapiRecords({model:a,fetch:["ObjectID","PlanEstimate","AcceptedDate","ScheduleState","Project","Name","Iteration"],filters:c})},getSettingsFields:function(){var a=this.callParent(),b=this.getSettings(),c=this._getRangeFromSettings(b,"ratioEstimated");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Ratio Estimated  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"ratioEstimated",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Ratio Estimated  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"acceptedAtSprintEnd");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Accepted at Sprint End  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelCls:"sliderlabel",labelAlign:"top",name:"acceptedAtSprintEnd",
width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Accepted at Sprint End   <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"planned");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Planned  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"planned",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Planned  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"velocity");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Actual  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"velocity",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Actual  <span class="pct">Red - {0}% - Yellow - {1}% - Green</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"ratioInProgress");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Ratio In Progress  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"ratioInProgress",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Ratio In Progress  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"acceptedAfterSprintEnd");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Accepted after Sprint End  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelAlign:"top",labelCls:"sliderlabel",name:"acceptedAfterSprintEnd",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Accepted after Sprint End  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"addedScope");a.push({xtype:"multislider",fieldLabel:Ext.String.format('Added Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelCls:"sliderlabel",labelAlign:"top",name:"addedScope",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Added Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}});var c=this._getRangeFromSettings(b,"removedScope");return a.push({xtype:"multislider",fieldLabel:Ext.String.format('Removed Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',c[0],c[1]),labelCls:"sliderlabel",name:"removedScope",labelAlign:"top",width:400,margin:25,values:c,increment:5,minValue:0,maxValue:100,listeners:{drag:function(a){a.setFieldLabel(Ext.String.format('Removed Scope  <span class="pct">Green - {0}% - Yellow - {1}% - Red</span>',a.getValues()[0],a.getValues()[1]))}}}),a}});
            
               Rally.launchApp('team-health', {
                   name: 'Team Domain Health'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.sliderlabel
{
  font-size: 14px;
  text-transform: uppercase;
  color: #000;
    clear:both;
    font-family: ProximaNova;
}
.sliderlabel .pct
{
  float: right;
  font-size: 12px;
  color: #333;
  text-transform: lowercase;

}

    </style>

</head>
<body></body>
</html>